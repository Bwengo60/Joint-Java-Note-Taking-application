import org.mindrot.jbcrypt.BCrypt;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;

public class SecureUserRegistration {
    static class User {
        String username;
        String email;
        String hashedPassword;

        public User(String username, String email, String hashedPassword) {
            this.username = username;
            this.email = email;
            this.hashedPassword = hashedPassword;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<User> users = new ArrayList<>();

        while (true) {
            System.out.println("1. Register");
            System.out.println("2. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    registerUser(scanner, users);
                    break;
                case 2:
                    System.out.println("Exiting registration.");
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void registerUser(Scanner scanner, ArrayList<User> users) {
        System.out.print("Enter a username: ");
        String username = scanner.next();
        System.out.print("Enter an email address: ");
        String email = scanner.next();
        System.out.print("Enter a password: ");
        String password = scanner.next();

        if (isUserExists(users, username, email)) {
            System.out.println("Registration failed. Username or email already exists.");
        } else if (!isEmailValid(email) || !isPasswordStrong(password)) {
            System.out.println("Registration failed. Invalid email or weak password.");
        } else {
            // Hash the password before storing it
            String hashedPassword = hashPassword(password);
            User newUser = new User(username, email, hashedPassword);
            users.add(newUser);
            System.out.println("Registration successful!");
            // Send email verification code (not implemented in this example).
        }
    }

    private static boolean isUserExists(ArrayList<User> users, String username, String email) {
        for (User user : users) {
            if (user.username.equals(username) || user.email.equals(email)) {
                return true;
            }
        }
        return false;
    }

    private static boolean isEmailValid(String email) {
        // Use a regular expression for email validation
        String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
        return Pattern.matches(emailRegex, email);
    }

    private static boolean isPasswordStrong(String password) {
        // Implement password strength criteria (e.g., minimum length, special characters)
        return password.length() >= 8 && password.matches(".*[!@#$%^&*].*");
    }

    private static String hashPassword(String password) {
        // Use BCrypt to hash the password
        return BCrypt.hashpw(password, BCrypt.gensalt(12));
    }
}
